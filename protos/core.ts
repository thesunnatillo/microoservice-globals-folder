// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.1
//   protoc               v5.27.3
// source: protos/core.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "core";

export interface CreateCourseDto {
  title: string;
  desc: string;
  price: number;
}

export interface UpdateCourseDto {
  id: number;
  title: string;
  desc: string;
  price: number;
}

export interface DeleteCourseDto {
  id: number;
}

export interface GetByIdDto {
  id: number;
}

export interface GetAllDto {
}

export interface CreateCourseRes {
  id: number;
  title: string;
  desc: string;
  price: number;
  message: string;
}

export interface UpdateCourseRes {
  title: string;
  desc: string;
  price: number;
  message: string;
}

export interface DeleteCourseRes {
  message: string;
}

export interface GetByIdRes {
  id: number;
  title: string;
  desc: string;
  price: number;
}

export interface GetAllRes {
  courses: UpdateCourseDto[];
  message?: string | undefined;
}

export const CORE_PACKAGE_NAME = "core";

export interface CoursesServiceClient {
  create(request: CreateCourseDto): Observable<CreateCourseRes>;

  update(request: UpdateCourseDto): Observable<UpdateCourseRes>;

  delete(request: DeleteCourseDto): Observable<DeleteCourseRes>;

  getById(request: GetByIdDto): Observable<GetByIdRes>;

  getAll(request: GetAllDto): Observable<GetAllRes>;
}

export interface CoursesServiceController {
  create(request: CreateCourseDto): Promise<CreateCourseRes> | Observable<CreateCourseRes> | CreateCourseRes;

  update(request: UpdateCourseDto): Promise<UpdateCourseRes> | Observable<UpdateCourseRes> | UpdateCourseRes;

  delete(request: DeleteCourseDto): Promise<DeleteCourseRes> | Observable<DeleteCourseRes> | DeleteCourseRes;

  getById(request: GetByIdDto): Promise<GetByIdRes> | Observable<GetByIdRes> | GetByIdRes;

  getAll(request: GetAllDto): Promise<GetAllRes> | Observable<GetAllRes> | GetAllRes;
}

export function CoursesServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "update", "delete", "getById", "getAll"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CoursesService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CoursesService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COURSES_SERVICE_NAME = "CoursesService";
